{"version":3,"file":"static/js/123.07adfcf1.chunk.js","mappings":"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","sources":["components/Button/Button.styled.jsx","components/Button/Button.jsx","components/MeasureSwitcher/MeasureSwitcher.styled.jsx","components/MeasureSwitcher/MeasureSwitcher.jsx","pages/Measure/Measure.styled.jsx","pages/Measure/Measure.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MainButton = styled.button`\n    display: flex;\n    width: 360px;\n    height: 50px;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 50px;\n\n\n    border-radius: 12px;\n    opacity: ${props => ( props.disabled ? 0.3 : 1)};\n    background-color: var(--accent-color);\n    color: var(--text-button-color);\n    font-size: 18px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 1.44;\n    letter-spacing: 0.2px;\n    transition: background-color var(--transition);\n\n    &:hover,\n    &:focus {\n        background-color: var(--hover-color);\n    }\n\n`;","import { MainButton } from \"./Button.styled\";\n\nconst Button = ({ text, handler, disabled=false }) => {\n    return (\n        <MainButton type=\"button\" onClick={handler} disabled={disabled}>{text}</MainButton>\n    );\n};\n\nexport default Button;","import styled from '@emotion/styled';\n\nexport const MeasureContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 360px;\n    border-radius: 10px;\n    border: 1px solid var(--accent-color);\n`;\n\nexport const Label = styled.label`\n    width: 50%;\n`;\n\nexport const InputMeasure = styled.input`\n    position: absolute;\n    z-index: -1;\n    opacity: 0;\n\n    &:checked + div {\n        background: rgba(95, 203, 57, 0.2);\n    }\n    &:hover + div,\n    :focus + div {\n        // background: rgba(95, 203, 57, 0.2);\n        box-shadow:  var(--shadow);\n    }\n\n+ div {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    width: 100%;\n    height: 32px;\n    border-top-left-radius: ${props => (props.option ? \"10px\" : \"0px\")};\n    border-bottom-left-radius: ${props => (props.option ? \"10px\" : \"0px\")};\n    border-top-right-radius: ${props => (!props.option ? \"10px\" : \"0px\")};\n    border-bottom-right-radius: ${props => (!props.option ? \"10px\" : \"0px\")};\n}\n`;\n\nexport const Text = styled.p`\n    text-align: center;\n    color: var(--accent-color);\n    font-size: 12px;\n    font-weight: 800;\n    letter-spacing: 2.5px;\n    text-transform: uppercase;\n`;","import { InputMeasure, Label, MeasureContainer, Text } from './MeasureSwitcher.styled';\n\nconst MeasureSwitcher = ({ handleUnit, unit }) => {\n\n    const handleInputChange = e => {\n        const { value } = e.target;\n        localStorage.setItem(\"unit\", JSON.stringify(value));\n        if (value === \"imperial\") {\n            handleUnit('imperial');\n        } else {\n            handleUnit('metric');\n        }\n    };\n\n    return (\n        <MeasureContainer>\n            <Label>\n                <InputMeasure type=\"radio\" name=\"measure\" value=\"imperial\" option  \n                checked={unit === \"imperial\"}\n                onChange={ handleInputChange}/>\n                <div>\n                    <Text>Imperial</Text>\n                </div>\n            </Label>\n            <Label>\n                <InputMeasure type=\"radio\" name=\"measure\" value=\"metric\" onChange={handleInputChange}\n                    checked={unit === \"metric\"}/>\n                <div>\n                    <Text>Metric</Text>\n                </div>\n            </Label>\n        </MeasureContainer>\n    );\n};\n\nexport default MeasureSwitcher;","import styled from '@emotion/styled';\n\nexport const MeasureContainer = styled.main`\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    align-items: center;\n`;\n\nexport const InputMeasureWrap = styled.div`\n    position: relative;\n    width: 360px;\n    margin-top: 10px;\n    &:last-of-type {\n        margin-bottom: 159px;\n    }\n`;\n\nexport const InputMeasureText = styled.p`\n    position: absolute;\n    top: 22px;\n    left: 15px;\n`;\n\nexport const InputMeasure = styled.input`\n    width: 100%;\n    height: 64px;\n    padding: 20px 15px;\n    border-radius: 10px;\n    border: 1px solid var(--borders-color);\n    background-color: transparent;\n\n    color: var(--primary-text-color);\n    font-family: Inter;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.71;\n    letter-spacing: 0.25px;\n    text-align: right;\n\n    &::-webkit-inner-spin-button,\n    ::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        appearance: none;\n        margin: 0;\n        }\n    &:hover,\n    :focus {\n        border-color: var(--hover-color);\n        outline: 0;\n        }\n`;","import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport TopBar from \"components/TopBar/TopBar\";\nimport Banner from \"components/Banner/Banner\";\nimport MeasureSwitcher from \"components/MeasureSwitcher/MeasureSwitcher\";\nimport Button from \"components/Button/Button\";\nimport { InputMeasure, InputMeasureText, InputMeasureWrap,  MeasureContainer } from \"./Measure.styled\";\n\n\nconst Measure = () => {\n    const [isDisabled, setIsDisabled] = useState(true);\n    const [height, setHeight] = useState(null);\n    const [weight, setWeight] = useState(null);\n    const [unit, setUnit] = useState('imperial');\n    const [heightUnit, setHeightUnit] = useState('ft');\n    const [weightUnit, setWeightUnit] = useState('pd');\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const heightFromLS = JSON.parse(localStorage.getItem(\"height\"));\n        if(heightFromLS) {\n            setHeight(Number.parseInt(heightFromLS))\n        }\n\n        const weightFromLS = JSON.parse(localStorage.getItem(\"weight\"));\n        if(weightFromLS) {\n            setWeight(Number.parseInt(weightFromLS))\n        }\n        height && weight ? setIsDisabled(false) : setIsDisabled(true);\n    }, [height, weight, setIsDisabled]);\n\n    useEffect(() => {\n        const unitFromLS = JSON.parse(localStorage.getItem(\"unit\"));\n        if(unitFromLS) {\n            setUnit(unitFromLS)\n        }\n        if (unit === 'imperial') {\n            setHeightUnit(\"ft\");\n            setWeightUnit(\"pd\");\n        } else {\n            setHeightUnit(\"cm\");\n            setWeightUnit(\"kg\");\n        }\n    },[unit]);\n\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n        if (name === \"height\") {\n            setHeight(value);\n            localStorage.setItem(\"height\", JSON.stringify(value));\n        } else {\n            setWeight(value);\n            localStorage.setItem(\"weight\", JSON.stringify(value));\n        }\n    };\n\n    const handleContinue = () => {\n        navigate('/behavior')\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>Measure</title>\n            </Helmet>\n            <TopBar address={'goal'}/>\n            <MeasureContainer>\n                <Banner title={'Measure Yourself'} \n                    text={'What are your height and body weight?'}/>\n                <MeasureSwitcher handleUnit={setUnit} unit={unit}/>\n                <InputMeasureWrap>\n                    <InputMeasureText>{`Height(${heightUnit})`}</InputMeasureText>\n                    <InputMeasure type=\"number\" name=\"height\" min=\"1\" max=\"300\" onChange={handleInputChange} value={height}/>\n                </InputMeasureWrap>\n                <InputMeasureWrap>\n                    <InputMeasureText>{`Current Weight(${weightUnit})`}</InputMeasureText>\n                    <InputMeasure type=\"number\" name=\"weight\" min=\"1\" max=\"300\" onChange={handleInputChange} value={weight}/>\n                </InputMeasureWrap>\n                <Button type={\"submit\"} text={'Continue'} handler={handleContinue} \n                    disabled={isDisabled}/>\n            </MeasureContainer>\n        </>\n    );\n};\n\nexport default Measure;"],"names":["MainButton","styled","_templateObject","_taggedTemplateLiteral","props","disabled","_ref","text","handler","_ref$disabled","_jsx","type","onClick","children","MeasureContainer","Label","_templateObject2","InputMeasure","_templateObject3","option","Text","_templateObject4","handleUnit","unit","handleInputChange","e","value","target","localStorage","setItem","JSON","stringify","_jsxs","name","checked","onChange","InputMeasureWrap","InputMeasureText","_useState","useState","_useState2","_slicedToArray","isDisabled","setIsDisabled","_useState3","_useState4","height","setHeight","_useState5","_useState6","weight","setWeight","_useState7","_useState8","setUnit","_useState9","_useState10","heightUnit","setHeightUnit","_useState11","_useState12","weightUnit","setWeightUnit","navigate","useNavigate","useEffect","heightFromLS","parse","getItem","Number","parseInt","weightFromLS","unitFromLS","_e$target","_Fragment","Helmet","TopBar","address","Banner","title","MeasureSwitcher","concat","min","max","Button"],"sourceRoot":""}